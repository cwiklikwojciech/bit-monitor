{"version":3,"sources":["DataFetching.js","Dankmemes.js","getApi.js","App.js","reportWebVitals.js","index.js"],"names":["DataFetching","useState","posts","setPosts","bb","setBB","last","setLast","lastbb","setLastbb","dolar","setDolar","useEffect","x","xbb","setInterval","axios","get","then","res","data","catch","err","console","log","ticker","rate","req","header","rates","mid","className","toFixed","class","empAge","empSal","Dankmemes","chartData","setChartData","i","n","Date","getMinutes","labels","datasets","label","backgroundColor","borderWidth","options","responsive","title","text","display","scales","yAxes","ticks","max","min","autoSkip","maxTicksLimit","beginAtZero","gridLines","xAxes","GetApi","props","number","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e98f33f8.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport './App.css';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\n\r\n\r\n\r\nfunction DataFetching() {\r\n    const [posts, setPosts] = useState([])\r\n    const [bb, setBB] = useState([])\r\n    const [last, setLast] = useState([])\r\n    const [lastbb, setLastbb] = useState([])\r\n    const [dolar, setDolar] = useState([])\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        let x = 0;\r\n        let xbb = 0;\r\n        setInterval(() => {\r\n\r\n            axios.get('https://www.bitstamp.net/api/v2/ticker/btcusd/')\r\n                .then(res => {\r\n                    //console.log(res)\r\n                    setPosts(res.data.last)\r\n                    x = res.data.last;\r\n                })\r\n                .catch(err => {\r\n                    console.log(err)\r\n                })\r\n\r\n            axios.get('https://api.bitbay.net/rest/trading/ticker/BTC-PLN')\r\n                .then(res => {\r\n                    //console.log(res.data.ticker.rate)\r\n                    setBB(res.data.ticker.rate)\r\n                    xbb = res.data.ticker.rate;\r\n                })\r\n                .catch(err => {\r\n                    console.log(err)\r\n                })\r\n\r\n            axios.get('https://api.nbp.pl/api/exchangerates/rates/a/usd/last/1/?format=json', function (req, res) {\r\n                res.header(\"Access-Control-Allow-Origin\", \"*\");\r\n            })\r\n                .then(res => {\r\n                    //console.log(res.data.rates[0].mid)\r\n                    setDolar(res.data.rates[0].mid)\r\n                })\r\n                .catch(err => {\r\n                    console.log(err)\r\n                })\r\n\r\n            setLast(x);\r\n            setLastbb(xbb);\r\n\r\n        }, 10000);\r\n\r\n\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"exchange\">\r\n            <div className=\"ex1\">\r\n                BitBay\r\n            <div className=\"BitStamp\">\r\n                    {bb} <br />\r\n                    {(((bb - lastbb) / bb) * 100).toFixed(2) >= 0 ? <span class=\"green\">{(((bb - lastbb) / bb) * 100).toFixed(2)}%</span> : <span class=\"red\">{(((bb - lastbb) / bb) * 100).toFixed(2)}%</span>}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"ex1\">\r\n                Bitstamp\r\n            <div className=\"BitStamp\">\r\n                    {(posts * dolar).toFixed(2)} <br />\r\n                    {(((posts - last) / posts) * 100).toFixed(2) >= 0 ? <span class=\"green\">{(((posts - last) / posts) * 100).toFixed(2)}%</span> : <span class=\"red\">{(((posts - last) / posts) * 100).toFixed(2)}%</span>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default DataFetching\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport axios from \"axios\";\r\nimport './App.css';\r\n\r\nlet empAge = [20, 12, 123, 435, 12, 531, 34, 12, 64, 75];\r\nlet empSal = [1, 2, 3, 4, 5, 6, 7, 8, 9, 98000];\r\n\r\n\r\nfunction Dankmemes() {\r\n    const [chartData, setChartData] = useState({});\r\n    const [employeeSalary, setEmployeeSalary] = useState([]);\r\n    const [employeeAge, setEmployeeAge] = useState([]);\r\n    const [dolar, setDolar] = useState([])\r\n\r\n\r\n    const chart = () => {\r\n\r\n        axios.get('https://api.nbp.pl/api/exchangerates/rates/a/usd/last/1/?format=json')\r\n            .then(res => {\r\n                //console.log(res.data.rates[0].mid)\r\n                setDolar(res.data.rates[0].mid)\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n\r\n        axios\r\n            .get(\"https://www.bitstamp.net/api/v2/ticker/btcusd/\")\r\n            .then(res => {\r\n                for (let i = 0; i < 10; i++) {\r\n                    empSal[i] = empSal[i + 1];\r\n                }\r\n                empSal[9] = (((res.data.last) * 3.7).toFixed(2));\r\n                for (let i = 0; i < 10; i++) {\r\n                    empAge[i] = empAge[i + 1];\r\n                }\r\n                var d = new Date();\r\n                var n = d.getMinutes();\r\n\r\n                empAge[9] = n;\r\n\r\n                setChartData({\r\n                    labels: empAge,\r\n                    datasets: [\r\n                        {\r\n                            label: \"bitstamp\",\r\n                            data: empSal,\r\n                            backgroundColor: [\"rgba(75, 192, 192, 0.6)\"],\r\n                            borderWidth: 4\r\n                        }\r\n                    ]\r\n                });\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n\r\n        console.log(empSal, empAge);\r\n\r\n\r\n    };\r\n\r\n    useEffect(() => {\r\n        setInterval(() => {\r\n            chart();\r\n        }, 20000);\r\n    }, []);\r\n    return (\r\n        <div className=\"Appx\">\r\n\r\n            <div>\r\n                <Line\r\n                    data={chartData}\r\n                    options={{\r\n                        responsive: true,\r\n                        title: { text: \"THICCNESS SCALE\", display: true },\r\n                        scales: {\r\n                            yAxes: [\r\n                                {\r\n                                    ticks: {\r\n                                        max: 104000,\r\n                                        min: 100000,\r\n                                        autoSkip: true,\r\n                                        maxTicksLimit: 10,\r\n                                        beginAtZero: true\r\n                                    },\r\n                                    gridLines: {\r\n                                        display: false\r\n                                    }\r\n                                }\r\n                            ],\r\n                            xAxes: [\r\n                                {\r\n                                    gridLines: {\r\n                                        display: false\r\n                                    }\r\n                                }\r\n                            ]\r\n                        }\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dankmemes;","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\n\r\nfunction GetApi(props) {\r\n\r\n\r\n\r\n    const [dolar, setDolar] = useState([])\r\n    useEffect(() => {\r\n        //setDolar(props.numbers);\r\n        console.log(props.number);\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default GetApi;\r\n","import React from 'react'\nimport './App.css';\nimport DataFetching from './DataFetching.js';\nimport DankMemes from \"./Dankmemes.js\";\nimport GetApi from \"./getApi.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GetApi number={111} />\n      <DataFetching />\n      <DankMemes />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}